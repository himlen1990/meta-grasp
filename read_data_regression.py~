import skimage.io as io
from skimage.draw import circle
from skimage.draw import line
from skimage.transform import resize
import numpy as np
import glob
import os
import random
import math


class dataReader_regression(object):
    def __init__(self, dataset_dir, n):
        self.dataset_dir = dataset_dir
        folders = range(0,n) #883
        folders = ['%04d'%(i) for i in folders]
        filenames = []
        images = []
        labels = []
        for i in folders:
            for name in glob.glob(os.path.join(dataset_dir, i, '*.png')):            
                filenames.append(name)

        for filename in filenames:
            img = io.imread(filename)
            label_file = filename[:-4]+'.npy'       
            label = np.load(label_file)
            images.append(img)
            labels.append(label)
        
        self.all_images = np.array(images)
        self.all_labels = np.array(labels)
        
    def sample_batch(self, batch_size=10):
        idx = np.random.choice(self.all_images.shape[0], batch_size)
        return self.all_images[idx], self.all_labels[idx]



    def show_grasp(self,image,predict,ground_true):

        mask = predict[:,:,0]
        x = predict[:,:,1]
        y = predict[:,:,2]
        theta = predict[:,:,3]

        cell_length = image.shape[0]/mask.shape[0]
        color_mask = np.zeros((cell_length, cell_length, 3))
        color_mask[:,:,0] = 255
        #print mask.shape

        test = mask.flatten()
        n_max = test.argsort()[-3:][::-1]
        topn_idx = []
        topn = 2
        for i in range(topn):            
            idx = np.unravel_index(n_max[i],mask.shape)
            topn_idx.append(idx)
        print "!!!!!!!!!!!"
        print topn_idx
        print n_max
        print "!!!!!!!!!!!"
        #rr,cc = np.where(mask > 3)
        #print rr,cc


        circle_x = x[topn_idx[0][0]][topn_idx[0][1]] + topn_idx[0][1] * cell_length
        circle_y = y[topn_idx[0][0]][topn_idx[0][1]] + topn_idx[0][0] * cell_length
        sin = math.sin(theta[topn_idx[0][0]][topn_idx[0][1]])
        cos = math.cos(theta[topn_idx[0][0]][topn_idx[0][1]])
        delta_x = 10 * cos
        delta_y = 10 * sin
        rl,cl = line(int(circle_y),int(circle_x),int(circle_y+delta_y),int(circle_x+delta_x))
        r,c = circle(circle_y,circle_x,3)
        image[r,c] = (20,220,220)
        image[rl,cl] = (20,220,220)
        print circle_x, circle_y, theta[topn_idx[0][0]][topn_idx[0][1]], mask[topn_idx[0][0]][topn_idx[0][1]]

        for i in range(1,len(topn_idx)):
            print topn_idx[i]
            circle_x = x[topn_idx[i][0]][topn_idx[i][1]] + topn_idx[i][1] * cell_length
            circle_y = y[topn_idx[i][0]][topn_idx[i][1]] + topn_idx[i][0] * cell_length
            sin = math.sin(theta[topn_idx[i][0]][topn_idx[i][1]])
            cos = math.cos(theta[topn_idx[i][0]][topn_idx[i][1]])
            #delta_x = math.cos(theta[rr[i]][cc[i])
            delta_x = 10 * cos
            delta_y = 10 * sin
            rl,cl = line(int(circle_y),int(circle_x),int(circle_y+delta_y),int(circle_x+delta_x))
            r,c = circle(circle_y,circle_x,3)
            
            image[r,c] = (20,220,20)
            image[rl,cl] = (20,220,20)
            
        print "ground true"
        mask_gt = ground_true[...,0]
        x_gt = ground_true[...,1]
        y_gt = ground_true[...,2]
        theta_gt = ground_true[...,3]
        rr2,cc2 = np.where(mask_gt > 0.0)

        for i in range(rr2.shape[0]):
            circle_xgt = x_gt[rr2[i]][cc2[i]] + cc2[i] * cell_length
            circle_ygt = y_gt[rr2[i]][cc2[i]] + rr2[i] * cell_length

            sin_gt =  math.sin(theta_gt[rr2[i]][cc2[i]])
            cos_gt =  math.cos(theta_gt[rr2[i]][cc2[i]])
            delta_xgt = 10 * cos_gt
            delta_ygt = 10 * sin_gt
            rl2,cl2 = line(int(circle_ygt),int(circle_xgt),int(circle_ygt+delta_ygt),int(circle_xgt+delta_xgt))
            r2,c2 = circle(circle_ygt,circle_xgt,3)
            print circle_xgt, circle_ygt, theta_gt[rr2[i]][cc2[i]], mask_gt[rr2[i]][cc2[i]]
            image[r2,c2]= (220,20,20)
            image[rl2,cl2] = (220,20,20)
        io.imshow(image)
        io.show()

#dr = dataReader('./dataset_test',3)
#a = dr.sample_mini_dataset(1)
#v,l = dr.get_mini_batches(a[0],10)

